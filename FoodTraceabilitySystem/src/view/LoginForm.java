package view;


import util2.RmiClientUtil;
import dao.UserDao;

import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.Font; 
import java.awt.Color; 
import java.rmi.RemoteException;
import java.util.List;
import model.User;
import service.UserInt;
import service.UserInterface;

public class LoginForm extends javax.swing.JFrame{

    UserDao dao = new UserDao();
    private javax.swing.JTextField txtUsername; 
    private javax.swing.JPasswordField txtPassword; 
    private javax.swing.JTextField txtOtp;
    private javax.swing.JButton btnRequestOtp;
    private javax.swing.JButton btnLogin; 
    private javax.swing.JLabel otpLabel;
    private javax.swing.JLabel Title;
    private javax.swing.JLayeredPane bg;
    private javax.swing.JLabel jLabel2; 
    private javax.swing.JLabel jLabel3; 
    private javax.swing.JLabel jLabel4; 
    private javax.swing.JPanel jPanel1;
    
    public LoginForm() {
        initComponents(); 
        setResizable(false);
        setLocationRelativeTo(null); // Center the form
        setTitle("User Login - Food Traceability System");

        // Initial state for OTP field
        if (otpLabel != null) otpLabel.setVisible(false);
        if (txtOtp != null) {
            txtOtp.setVisible(false);
            txtOtp.setEnabled(false);
        }
        
        // Set tooltips
        btnLogin.setToolTipText("Click to login with username and password, or with OTP if requested.");
        btnRequestOtp.setToolTipText("Click to request a One-Time Password (OTP) to your registered contact.");

        // Set default button
        JRootPane rootPane = SwingUtilities.getRootPane(btnLogin); 
        if (rootPane != null) { // Check if rootPane is available
            rootPane.setDefaultButton(btnLogin);
        }
    }
    
    private void allowOnlyLetters(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isLetter(c) && !Character.isWhitespace(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
                    evt.consume();
                }
            }
        });
    }
    
    private void disallowSpaces(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isWhitespace(c)) { 
                    evt.consume();
                    JOptionPane.showMessageDialog(null, "No spaces allowed in this field.", "Input Restriction", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        // This code will be mostly generated by NetBeans based on the .form file.
        // For consistency, I'm ensuring the names here match what was in the .form file.
        // The manual layout here is a simplified representation.

        bg = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel(); 
        jLabel3 = new javax.swing.JLabel(); 
        txtUsername = new javax.swing.JTextField(); // Corresponds to 'Username' in original .form
        txtPassword = new javax.swing.JPasswordField(); // Corresponds to 'Password' in original .form
        btnLogin = new javax.swing.JButton();    // Corresponds to 'Login' in original .form
        jLabel4 = new javax.swing.JLabel(); 

        otpLabel = new JLabel("OTP:"); // Ensure this is declared and initialized
        txtOtp = new JTextField(10);
        btnRequestOtp = new JButton("Request OTP");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        Title.setFont(new java.awt.Font("Tahoma", 1, 13)); 
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER); // Center title
        Title.setText("Login To Food Traceability System"); 

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Username:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Password:");

        btnLogin.setFont(new java.awt.Font("Tahoma", 1, 13)); 
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt); 
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Note: Only registered users can login.");
        
        otpLabel.setForeground(new Color(255, 255, 255));
        btnRequestOtp.setFont(new Font("Tahoma", Font.PLAIN, 12)); 

        btnRequestOtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestOtpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50) 
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE) // Adjusted to take full width minus padding
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(otpLabel))
                        .addGap(20, 20, 20) 
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(txtPassword)
                            .addComponent(txtOtp)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRequestOtp, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))) // Adjusted btnRequestOtp width
                .addGap(50, 50, 50)) // Common right padding
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20,20,20)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30,30,30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20,20,20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20,20,20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otpLabel)
                    .addComponent(txtOtp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30,30,30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnRequestOtp))
                .addGap(30,30,30)
                .addComponent(jLabel4)
                .addContainerGap(100, Short.MAX_VALUE))
        );
        
        bg.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg) 
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestOtpActionPerformed(java.awt.event.ActionEvent evt) {
        String username = txtUsername.getText().trim();
String enteredOtp = txtPassword.getText().trim();

if (username.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Enter both Username", "Missing Info", JOptionPane.WARNING_MESSAGE);
    return;
}

try {
    UserInterface userService = RmiClientUtil.getUserService();
    boolean isValid = userService.verifyOtp(username, enteredOtp);
    
    if (isValid) {
        JOptionPane.showMessageDialog(this, "OTP Verified! Proceeding to login...", "Success", JOptionPane.INFORMATION_MESSAGE);
        // Proceed to open your dashboard or next frame
    } else {
        JOptionPane.showMessageDialog(this, "Invalid or Expired OTP.", "Error", JOptionPane.ERROR_MESSAGE);
    }
} catch (Exception ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error verifying OTP: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) { 
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());
        String otp = (txtOtp != null && txtOtp.isEnabled()) ? txtOtp.getText().trim() : "";

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Missing ", "Login Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        UserInterface userService = null;
        try {
            userService = (UserInterface) RmiClientUtil.getUserService();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error connecting to login service: " + ex.getMessage(), "Service Connection Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return;
        }

        try {
            if (txtOtp != null && txtOtp.isEnabled() && !otp.isEmpty()) { 
                if (password.isEmpty()) { 
                     JOptionPane.showMessageDialog(this, "Password is required even with OTP for this login flow.", "Login Error", JOptionPane.WARNING_MESSAGE);
                     return;
                }
                boolean otpValid = userService.verifyOtp(username, otp);
                if (otpValid) {
                    JOptionPane.showMessageDialog(this, "OTP Verified Successfully!", "OTP Verification Success", JOptionPane.INFORMATION_MESSAGE);
                    User loggedInUser = userService.loginUser(username, password); 
                    if (loggedInUser != null) {
                        JOptionPane.showMessageDialog(this, "Login Successful! Welcome " + loggedInUser.getUsername(), "Login Success", JOptionPane.INFORMATION_MESSAGE);
                        new AdminDashboard(loggedInUser).setVisible(true);
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Login failed after OTP verification. Please check credentials.", "Login Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid OTP. Please try again.", "OTP Error", JOptionPane.ERROR_MESSAGE);
                }
            } else { 
                if (password.isEmpty()) {
                     JOptionPane.showMessageDialog(this, "Password is required.", "Login Error", JOptionPane.WARNING_MESSAGE);
                     return;
                }
                User loggedInUser = userService.loginUser(username, password);
                if (loggedInUser != null) {
                    JOptionPane.showMessageDialog(this, "Login Successful! Welcome " + loggedInUser.getUsername(), "Login Success", JOptionPane.INFORMATION_MESSAGE);
                    new AdminDashboard(loggedInUser).setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid username or password.", "Login Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error during login: " + ex.getMessage(), "Login Process Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) { 
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }
    // Variables declaration - (from original .form, ensure names match)
    // private javax.swing.JButton Login; // Now btnLogin
    // private javax.swing.JPasswordField Password; // Now txtPassword
    // private javax.swing.JLabel Title;
    // private javax.swing.JTextField Username; // Now txtUsername
    // private javax.swing.JLayeredPane bg;
    // private javax.swing.JLabel jLabel2;
    // private javax.swing.JLabel jLabel3;
    // private javax.swing.JLabel jLabel4;
    // private javax.swing.JPanel jPanel1;
    // End of variables declaration

    
    
    

    
  
}
